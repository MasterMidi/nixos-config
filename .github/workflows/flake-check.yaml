name: Flake Check

on:
  # Run on pull requests to main branch
  pull_request:
    branches:
      - main
  # Run on pushes to the main branch
  push:
    branches:
      - main
  # Allow manual triggering from the GitHub UI
  workflow_dispatch:

jobs:
  flake-check:
    runs-on: ubuntu-latest
    outputs:
      # Define an output named 'matrix'
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3
        with:
          extra-conf: |
            experimental-features = nix-command flakes pipe-operators
      
      - name: Run flake check
        run: |
          set -o pipefail
          nix flake check --keep-going --quiet --log-format internal-json 2>&1 | sed -u 's/^@nix //' | tee build-log.jsonl
      
      - name: Upload build log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-log
          path: build-log.jsonl
          retention-days: 30

      - name: Parse build log and create matrix
        if: always()
        id: generate-matrix
        run: |
          nix shell nixpkgs#jq
          MATRIX=$(jq -s 'map(select(.level <= 2 and .action == "msg") | {level, msg: (.msg | gsub("\u001b\\[\\d*;*\\d*m"; ""))})' build-log.jsonl)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  create-issues:
    runs-on: ubuntu-latest
    needs: [flake-check]
    if: always()
    strategy:
      # Use the 'fromJSON' function to parse the output from the 'generate-matrix' job
      matrix: ${{ fromJSON(needs.flake-check.outputs.matrix) }}
      # Don't cancel all jobs if one fails, allowing others to complete
      fail-fast: false
    steps:
      - name: test matrix
        run: |
          echo "level: ${{ matrix.level }} message: ${{ matrix.msg }}"
        
