{
  config,
  pkgs,
  ...
}: {
  virtualisation.oci-containers.compose.mediaserver = {
    containers = rec {
      cross-seed = {
        image= "ghcr.io/cross-seed/cross-seed:6";
        user = "${builtins.toString config.users.users.michael.uid}:${builtins.toString config.users.groups.users.gid}";
        commands = ["daemon"];
        networking = {
          networks = ["default:ip=10.89.1.101"];
          aliases = ["cross-seed"];
          ports = {
            http = {
              host = 2468;
              internal = 2468;
            };
          };
        };
        volumes = [
          "/mnt/ssd/services/cross-seed/config:/config:rw" # config location
          "${config.sops.templates.CROSS_SEED_CONFIG.path}:/config/config.js:ro"
          "/mnt/ssd/services/qbit/config/data/BT_backup:/mnt/ssd/services/qbit/config/data/BT_backup:ro" # readonly access to torrent files for qbit
          "/mnt/hdd/torrents:/storage/torrents:rw" # root folder for torrents in qbit
        ];
        dependsOn = ["qbit"];
      };
    };
  };

  sops.templates.CROSS_SEED_CONFIG = let
  crossSeedConfigGen = jsonSettingsFile:
  # js 
  ''
"use strict";
module.exports = ${jsonSettingsFile};
  '';
in {
      owner = config.users.users.michael.name;
      group = config.users.groups.users.name;
      restartUnits = [config.virtualisation.oci-containers.compose.mediaserver.containers.cross-seed.unitName];
      content = crossSeedConfigGen (builtins.toJSON {
        # Provide your own API key here to override the autogenerated one.
        # Not recommended - prefer using the autogenerated API key via
        # `cross-seed api-key`.
        # Must be 24+ characters.
        apiKey = "${config.sops.placeholder.CROSS_SEED_PRIVATE_API_KEY}";

        # List of Torznab URLs.
        # For Jackett, click "Copy RSS feed".
        # For Prowlarr, click on the indexer name and copy the Torznab Url, then
        # append "?apikey=YOUR_PROWLARR_API_KEY".
        torznab = [
          "http://prowlarr:9696/10/api?apikey=${config.sops.placeholder.PROWLARR_API_KEY}" # digitalcore
          "http://prowlarr:9696/9/api?apikey=${config.sops.placeholder.PROWLARR_API_KEY}" # milkie
        ];

        # URL(s) to your Sonarr instance(s)
        #
        # You should order these in most likely to match -> the least likely order.
        # They are searched sequentially as they are listed.
        #
        # This apikey parameter comes from Sonarr
        sonarr = [ "http://sonarr:8989/?apikey=${config.sops.placeholder.SONARR_API_KEY}" ];

        # URL(s) to your Radarr instance(s)
        #
        # You should order these in most likely to match -> the least likely order.
        # They are searched sequentially as they are listed.
        #
        # This apikey parameter comes from Radarr
        radarr = [ "http://radarr:7878/?apikey=${config.sops.placeholder.RADARR_API_KEY}" ];

        # Bind to a specific host address.
        # Example: "127.0.0.1"
        # Default is "0.0.0.0"
        host = null;

        # The port you wish to listen on for daemon mode.
        port = 2468;

        # cross-seed will send POST requests to this url with a JSON payload of
        # { title, body }. Conforms to the caronc/apprise REST API.
        notificationWebhookUrl = "http://apprise:8000/notify/${config.sops.placeholder.CROSS_SEED_PRIVATE_APPRISE_KEY}";

        # The url of your rtorrent XMLRPC interface.
        # Only relevant with action: "inject".
        # Could be something like "http://username:password@localhost:1234/RPC2
        rtorrentRpcUrl = null;

        # The url of your qBittorrent webui.
        # Only relevant with action: "inject".
        #
        # If using Automatic Torrent Management, please read:
        # https://www.cross-seed.org/docs/v6-migration#qbittorrent
        #
        # Supply your username and password inside the url like so:
        # "http://username:password@localhost:8080"
        qbittorrentUrl = "http://admin:${config.sops.placeholder.QBIT_PUBLIC_PASSWORD}@qbit:9060";

        # The url of your Transmission RPC interface.
        # Usually ends with "/transmission/rpc".
        # Only relevant with action: "inject".
        # Supply your username and password inside the url like so:
        # "http://username:password@localhost:9091/transmission/rpc"
        transmissionRpcUrl = null;

        # The url of your Deluge JSON-RPC interface.
        # Usually ends with "/json".
        # Only relevant with action: "inject".
        # Supply your WebUI password as well like so:
        # "http://:password@localhost:8112/json"
        delugeRpcUrl = null;

        # END OF POTENTIALLY SENSITIVE CONFIGURATION OPTIONS

        # Pause at least this many seconds in between each search. Higher is safer
        # for you and friendlier for trackers.
        # Minimum value of 30.
        delay = 30;

        # Usually unnecessary: https://www.cross-seed.org/docs/v6-migration#data-based-matching-use-cases
        # To search with already downloaded data, you can enter the directories
        # to your downloaded torrent data to find matches, rather than relying
        # entirely on the .torrent files themselves for matching.
        dataDirs = [];

        # Defines what qBittorrent or Deluge category to set on linked torrents
        #
        # qBittorrent: If you have linking enabled, all torrents will be injected
        # to this category.
        #
        # Default is "cross-seed-link".
        linkCategory = "cross-seed";

        # cross-seed will create links to matched files in the specified directories.
        # If using hardlinks, you will need as many linkDirs as drives/partion/volumes
        # as your dataDirs and torrent client download directories.
        #
        # Ideally, you should only have a single linkDir and use drive pooling.
        # Using multiple linkDirs should be reserved for setups with cache/temp drives
        # or where drive pooling is impossible.
        #
        # IF YOU ARE USING HARDLINKS, THIS MUST BE UNDER THE SAME VOLUMES AS YOUR
        # DATADIRS. THIS PATH MUST ALSO BE ACCESSIBLE VIA YOUR TORRENT CLIENT
        # USING THE SAME PATH.
        #
        # https://www.cross-seed.org/docs/basics/options#linkdirs
        linkDirs = [ "/storage/torrents/public/cross-seed/links" ];

        # cross-seed will use links of this type to inject data-based matches into
        # your client. We recommend reading the following entry:
        # https://www.cross-seed.org/docs/tutorials/linking#hardlinks-vs-symlinks
        # Options: "symlink", "hardlink".
        linkType = "hardlink";

        # Enabling this will link files using v5's flat folder style.
        #
        # Each individual Torznab tracker's cross-seeds, otherwise, will have its
        # own folder with the tracker's name and it's links within it.
        #
        # If using Automatic Torrent Management in qBittorrent, please read:
        # https://www.cross-seed.org/docs/basics/options#flatlinking
        #
        # Default: false.
        flatLinking = false;

        # Determines flexibility of naming during matching, all options will have
        # no false positives. Using partial can double the amount of cross seeds found.
        # Options: "safe", "risky", "partial".
        #
        # "safe" will allow only perfect name/size matches using the standard
        # matching algorithm.
        #
        # "risky" uses filesize as its only comparison point.
        #
        # "partial" is like risky but allows matches if they are missing small
        # files like .nfo/.srt.
        matchMode = "partial";

        # Skip rechecking on injection if unnecessary. Certain matches, such as partial,
        # will always be rechecked. Set to false to recheck all torrents before resuming.
        skipRecheck = true;

        # The maximum size in bytes remaining for a torrent to be resumed.
        # Must be in the range of 0 to 52428800 (50 MiB).
        autoResumeMaxDownload = 52428800;

        # Determines how deep into the specified dataDirs to go to generate new
        # searchees. Setting this to higher values will result in more searchees
        # and more API hits to your indexers.
        maxDataDepth = 3;

        # Directory containing .torrent files.
        # For qBittorrent, this is BT_Backup.
        # For rtorrent, this is your session directory as configured in your
        # .rtorrent.rc file.
        # For Deluge, this is ~/.config/deluge/state.
        # For Transmission, this would be ~/.config/transmission/torrents.
        torrentDir = "/mnt/ssd/services/qbit/config/data/BT_backup";

        # Where to save the torrent files that cross-seed finds for you.
        outputDir = "/storage/torrents/public/cross-seed/torrents";

        # Whether to include single episode torrents in search/webhook/rss.
        #
        # This setting does not affect matching episodes from announce.
        includeSingleEpisodes = false; # webhook from qbit will make sure to search https://www.cross-seed.org/docs/tutorials/triggering-searches

        # Include torrents/data comprised of non-video files.
        #
        # If this option is set to false, any folders or torrents whose
        # totalNonVideoFilesSize / totalSize > fuzzySizeThreshold
        # will be excluded.
        #
        # For example, if you have .srt or .nfo files inside a torrent, using
        # false will still allow the torrent to be considered for cross-seeding
        # while disallowing torrents that are music, games, books, etc.
        # For full disc based folders (not .ISO) you may wish to set this as true.
        includeNonVideos = false;

        # Match season packs from the individual episodes you already have.
        #
        # null - disabled
        # 1 - must have all episodes
        # 0.8 - must have at least 80% of the episodes
        seasonFromEpisodes = 1;

        # You should NOT modify this unless you have good reason.
        # The following option is the preliminary value to compare sizes of
        # releases for further comparison.
        #
        # decimal value (0.02 = 2%)
        fuzzySizeThreshold = 0.02;

        # Time based options below use the following format:
        # https://github.com/vercel/ms

        # Exclude torrents or data first seen by cross-seed more than this long ago.
        # Examples:
        # "5 days"
        # "2 weeks"
        #
        # This value must be in the range of 2-5 times your excludeRecentSearch
        excludeOlder = "2 weeks";

        # Exclude torrents or data which has been searched more recently than this
        # long ago.
        #
        # Doesn't exclude previously failed searches.
        # Examples:
        # "2 days"
        # "5 days"
        #
        # This value must be 2-5x less than excludeOlder.
        excludeRecentSearch = "3 days";

        # Which action to take upon a match being found.
        # Options: "save", "inject".
        action = "inject";

        # qBittorrent and Deluge specific.
        # Whether to inject using the same labels/categories as the original
        # torrent.
        #
        # qBittorrent (linking): The category will always be linkCategory.
        # If set to true, a tag of category.cross-seed will be added.
        duplicateCategories = false;

        # Run rss scans on a schedule.
        # Set to undefined or null to disable. Minimum of 10 minutes.
        # Examples:
        # "10 minutes"
        # "1 hour"
        rssCadence = "30 minutes";

        # Run searches on a schedule.
        # Set to undefined or null to disable. Minimum of 1 day.
        # Examples:
        # "2 weeks"
        # "3 days"
        #
        # This value must be at least 3x less than your excludeRecentSearch
        searchCadence = "1 day";

        # Fail snatch requests that haven't responded after this long.
        # Set to null for an infinite timeout.
        # Examples:
        # "30 seconds"
        # null
        snatchTimeout = "30 seconds";

        # Fail search requests that haven't responded after this long.
        # Set to null for an infinite timeout.
        # Examples:
        # "30 seconds"
        # null
        searchTimeout = "2 minutes";

        # The number of searches (unique queries) to make in one run/batch per indexer.
        # If more than this many searches are queued,
        # "searchCadence" will determine how long until the next batch.
        #
        # Combine this with "excludeRecentSearch" and "searchCadence" to smooth
        # long-term API usage patterns.
        #
        # Set to null for no limit.
        searchLimit = 400;

        # Ignore torrents or data containing these properties:
        # https://www.cross-seed.org/docs/basics/options#blocklist
        blockList = [];
      });
    };
}

