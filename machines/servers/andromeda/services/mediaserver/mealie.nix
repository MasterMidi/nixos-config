# Auto-generated using compose2nix v0.2.1-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."mealie" = {
    image = "ghcr.io/mealie-recipes/mealie:nightly";
    environment = {
      ALLOW_SIGNUP = "true";
      # BASE_URL = "https://mealie.yourdomain.com";
      DB_ENGINE = "postgres";
      MAX_WORKERS = "1";
      PGID = "1000";
      POSTGRES_DB = "mealie";
      POSTGRES_PASSWORD = "mealie";
      POSTGRES_PORT = "5432";
      POSTGRES_SERVER = "postgres";
      POSTGRES_USER = "mealie";
      PUID = "1000";
      TZ = config.time.timeZone;
      WEB_CONCURRENCY = "1";
    };
    volumes = [
      "mealie_mealie-data:/app/data:rw"
    ];
    ports = [
      "9925:9000/tcp"
    ];
    dependsOn = [
      "postgres"
    ];
    log-driver = "journald";
    extraOptions = [
      "--memory=1048576000b"
      "--network-alias=mealie"
      "--network=mealie_default"
    ];
  };
  systemd.services."docker-mealie" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-mealie_default.service"
      "docker-volume-mealie_mealie-data.service"
    ];
    requires = [
      "docker-network-mealie_default.service"
      "docker-volume-mealie_mealie-data.service"
    ];
    partOf = [
      "docker-compose-mealie-root.target"
    ];
    wantedBy = [
      "docker-compose-mealie-root.target"
    ];
  };
  virtualisation.oci-containers.containers."postgres" = {
    image = "postgres:15";
    environment = {
      POSTGRES_PASSWORD = "mealie";
      POSTGRES_USER = "mealie";
    };
    volumes = [
      "mealie_mealie-pgdata:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"pg_isready\"]"
      "--health-interval=30s"
      "--health-retries=3"
      "--health-timeout=20s"
      "--network-alias=postgres"
      "--network=mealie_default"
    ];
  };
  systemd.services."docker-postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-mealie_default.service"
      "docker-volume-mealie_mealie-pgdata.service"
    ];
    requires = [
      "docker-network-mealie_default.service"
      "docker-volume-mealie_mealie-pgdata.service"
    ];
    partOf = [
      "docker-compose-mealie-root.target"
    ];
    wantedBy = [
      "docker-compose-mealie-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-mealie_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f mealie_default";
    };
    script = ''
      docker network inspect mealie_default || docker network create mealie_default
    '';
    partOf = ["docker-compose-mealie-root.target"];
    wantedBy = ["docker-compose-mealie-root.target"];
  };

  # Volumes
  systemd.services."docker-volume-mealie_mealie-data" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect mealie_mealie-data || docker volume create mealie_mealie-data
    '';
    partOf = ["docker-compose-mealie-root.target"];
    wantedBy = ["docker-compose-mealie-root.target"];
  };
  systemd.services."docker-volume-mealie_mealie-pgdata" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect mealie_mealie-pgdata || docker volume create mealie_mealie-pgdata
    '';
    partOf = ["docker-compose-mealie-root.target"];
    wantedBy = ["docker-compose-mealie-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-mealie-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
